<?php
// +----------------------------------------------------------------------
// | ThinkCMF [ WE CAN DO IT MORE SIMPLE ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013-2014 http://www.thinkcmf.com All rights reserved.
// +----------------------------------------------------------------------
// | Author: Tuolaji <479923197@qq.com>
// +----------------------------------------------------------------------
/**
 */
namespace Admin\Controller;
use Common\Controller\AdminbaseController;
use Org\Net\Http;
class XxtController extends AdminbaseController {
    protected $xxt_code_model;
    public function _initialize()
    {
        parent::_initialize();
        $this->xxt_code_model = D('Common/XxtCode');
    }


    /**
     * 授权码列表页面
     */
    public function code_list(){
        $code_model = M(xxt_code);
        $auth_code  = trim(I('auth_code'));//去除空格
        $type  = I('type',"momo");
        $start_time = I('start_time');
        $end_time   = I('end_time');

        //条件查询
        if($type!='0'){
            $where['type'] = $type;
        }

        if($auth_code){
            $where['auth_code'] =  array('like','%'.$auth_code.'%');
        }
        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['createtime'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['createtime'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['createtime'] = array('between',array($start_time_st,$end_time_st));
        }

        $count = $code_model->where($where)->count();
        $page = $this->page($count, 15);

        $list = $code_model->where($where)->order('starttime asc,createtime desc') ->limit($page->firstRow, $page->listRows)->select();

        $this->assign("list",$list);
        $this->assign("auth_code",$auth_code);
        $this->assign("type",$type);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time?$end_time:date('Y-m-d H:i',NOW_TIME));
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }
    /**
     * 添加授权码页面
     */
    public function code_add(){
        $this->display();
    }
    /**
     * 设备授权详情
     */
    public function dev_auth_list(){
        $device_auth_model = M('xxt_device_auth');
        //筛选条件
        $unique_id = trim(I('unique_id'));
        $dev_name = trim(I('dev_name'));
        $auth_code = trim(I('auth_code'));
        $start_time = I('start_time');
        $end_time   = I('end_time');
        if($unique_id){
            $where['unique_id'] = array('like','%'.$unique_id.'%');
        }
        if($dev_name){
            $where['dev_name'] = array('like','%'.$dev_name.'%');
        }
        if($auth_code){
            $where['auth_code'] = array('like','%'.$auth_code.'%');
        }

        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['overtime'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['overtime'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['overtime'] = array('between',array($start_time_st,$end_time_st));
        }

        $count = $device_auth_model->where($where)->count();
        $page = $this->page($count, 15);
        $list = $device_auth_model->where($where)->order('id desc')->limit($page->firstRow, $page->listRows)->select();

        $this->assign("list",$list);
        $this->assign("unique_id",$unique_id);
        $this->assign("dev_name",$dev_name);
        $this->assign("auth_code",$auth_code);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time);
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 添加授权码
     */
    public function code_add_post(){
        if(IS_POST){
            if($this->xxt_code_model->create()!==false){
                $code_number = I('code_number');
                $valid_time = I('valid_time');
                $type = I('type',"momo");

                if(empty($code_number)||empty($valid_time)||$type==''){
                    $this->error("参数错误");
                }
                if($code_number>10000){
                    $this->error("数量太大");
                }

                //生成授权码
                $code_arr = $this->create_code($code_number,$valid_time,$type);
                $rs = $this->xxt_code_model->addAll($code_arr);
                //echo $this->xxt_code_model->getLastSql();
                if($rs){
                    $this->success('添加成功',U('xxt/code_list'));
                }else{
                    $this->error($this->xxt_code_model->getError());
                }
            }else{
                $this->error($this->xxt_code_model->getError());
            }

        }
    }

    /**
     * 批量生成授权码
     */
    public function create_code($number=1,$valid_time=30,$type="momo"){
        $server_ip = gethostbyname($_SERVER['SERVER_NAME']);
        $result = array();
            for($i=0;$i<$number;$i++){
                $rand = rand(0,99999999);
                $nowtime = NOW_TIME;
                $code = md5(md5($server_ip.$rand.$nowtime).NOW_TIME.$rand);
                $result[$i]['auth_code'] = $code;
                $result[$i]['createtime'] = NOW_TIME;
                $result[$i]['valid_time'] = $valid_time;
                $result[$i]['type'] = $type;
            }
        return $result;
    }

    /**
     * 导出excel
     */
    public function code_toexcel(){
        $code_model = M(xxt_code);
        //筛选条件
        $auth_code  = trim(I('auth_code'));//去除空格
        $type  = I('type',"momo");
        $start_time = I('start_time');
        $end_time   = I('end_time');

            //条件查询
           if($type!='0'){
              $where['type'] =  $type;
            }

            if($auth_code){
              $where['auth_code'] = array('like','%'.$auth_code.'%');
            }
            //时间筛选
            if($start_time){
                $start_time_st =  strtotime($start_time);
                $where['createtime'] = array('egt',$start_time_st);
            }
            if($end_time){
                $end_time_st =  strtotime($end_time)+60;
                $where['createtime'] = array('elt',$end_time_st);
            }
            if($start_time&&$end_time){
                $start_time_st =  strtotime($start_time);
                $end_time_st =  strtotime($end_time)+60;
                $where['createtime'] = array('between',array($start_time_st,$end_time_st));
            }

        $list = $code_model->where($where)->order('starttime asc,createtime desc') ->select();
        //整理导出数据
        $result = array();
        foreach($list as $key=>$value){
            $result[$key]['id']  = $value['id']."";
            $result[$key]['auth_code'] = $value['auth_code']."";
            $result[$key]['createtime'] = date('Y-m-d H:i',$value['createtime']);
            $result[$key]['valid_time'] = $value['valid_time'];
            if($value['starttime']==0){
                $result[$key]['starttime'] = "未使用";
            }else{
                $result[$key]['starttime'] = date('Y-m-d H:i',$value['starttime']);
            }
            switch($value['type']){
                case "momo":
                    $result[$key]['type'] = "陌陌";
                    break;
                case "wechat":
                    $result[$key]['type'] = "微信";
                    break;
            }
        }
        //导出excel
        $title_arr=array('ID','授权码','创建时间','有效期限(天)','使用时间','类型');
        if(empty($result)){
            $this->error("导出文件为空，请注意筛选条件");
        }else{
            export_Excel("授权码",$result,$title_arr,$start_time_st?date('Y-m-d',$start_time_st):'',$end_time_st?date('Y-m-d',$end_time_st):'');
        }
    }

    /**
     * 脚本列表
     */
    public function script_list(){
        //参数
        $script_name = I('script_name');
        $script_version = I('script_version');
        $start_time = I('start_time');
        $end_time   = I('end_time');
        $script_version_model = M('xxt_script_version');

        if($script_name){
            $where['script_name'] = array('like','%'.$script_name.'%');
        }
        if($script_version){
           $where['script_version'] = array('like','%'.$script_version.'%');
        }
        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['overtime'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['overtime'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['overtime'] = array('between',array($start_time_st,$end_time_st));
        }

        $count = $script_version_model->where($where)->count();
        $page = $this->page($count, 15);
        $list = $script_version_model->where($where)->order('createtime desc')->limit($page->firstRow, $page->listRows)->select();

        $this->assign("list",$list);
        $this->assign("script_name",$script_name);
        $this->assign("script_version",$script_version);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time);
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 脚本上传页面渲染
     */
    public function script_upload(){
        $this->display();
    }

   public function script_upload_post()
   {
       if (IS_POST) {
           //参数
           $script_name = I('script_name');
           $script_version = I('script_version');
           $remark = I('remark');

           if(empty($script_name)||empty($script_version)||empty($remark)){
                $this->error('参数错误');
           }
           //查询脚本是否存在
           $rs = M('xxt_script_version')->where(array('script_name'=>$script_name,'script_version'=>$script_version))->find();
           if($rs){
               $this->error('脚本已存在,勿重复添加！');
           }else{
               $add = array(
                   'script_name'=>$script_name,
                   'script_version'=>$script_version,
                   'remark'=>$remark,
                   'createtime'=>NOW_TIME
               );
               $rs = M('xxt_script_version')->add($add);
               if($rs){
                   $this->success('添加成功！');
               }else{
                   $this->error('添加失败！');
               }
           }
       } else {
           $this->error('提交内容有误！');
       }
   }

       //上传脚本文件
       public function script_upload_file(){

           $filename = basename($_FILES['Filedata']['name'],'.xxt');
           if(!$filename){
               $this->error('上传文件名有误！');
           }
           $filename_arr = explode('_',$filename);
           $version = $filename_arr[count($filename_arr)-1];//register_momo_1.0获取1.0
           $savename = '';
           for($i=0;$i<count($filename_arr)-1;$i++){
               if($i==count($filename_arr)-2){
                   $savename.=$filename_arr[$i];
               }else{
                   $savename.=$filename_arr[$i]."_";
               }
           }

           $upload_max_filesize=1024*1024;//脚本最大10M
           $rootPath = C('SCRIPT_UPLOAD_PATH');
           $savePath = $version.'/';
           //上传处理类
           $config=array(
               'rootPath' => $rootPath,
               'savePath' => $savePath,
               'maxSize' => $upload_max_filesize,
               'saveName'   =>    $savename,
               'exts'       =>    array('xxt'),
               'autoSub'    =>    false,
           );

           $upload = new \Think\Upload($config);//
           //开始上传
           $info=$upload->upload($_FILES);

           if ($info) {
               //上传成功
               $message = array(
                   'code'=>1,
                   'text'=>"上传成功",
                   'filepath'=>$savename,
                   'version'=>$version
               );
               $this->ajaxReturn($message);
           }else{
               $error = $upload->getError();
               $message = array(
                   'code'=>0,
                   'text'=>$error,
               );
               if($error){
                   $this->ajaxReturn($message);
               }
           }
       }


    /**
     * 生成二维码方法
     * @param url 需要生成二维码的地址
     * @param filename 生成二维码文件名
     */
    function buildQrcode($content,$filename,$date){
        //引入二维码生成工具
        vendor("phpqrcode.phpqrcode");

        $PNG_TEMP_DIR = './data/upload/qrcode/'.$date.'/';

        //判断上传目录是否为空
        if (!file_exists($PNG_TEMP_DIR))
            mkdir($PNG_TEMP_DIR);

        //容错 'L','M','Q','H'四个等级
        $errorCorrectionLevel = 'H';

        //生成的二维码大小 4-10
        $matrixPointSize = 10;

        if (!file_exists($PNG_TEMP_DIR.$filename."png"))
        {
            \QRcode::png($content, $PNG_TEMP_DIR.$filename, $errorCorrectionLevel, $matrixPointSize, 2);
        }

    }
    public function download_qrcode(){
        $code = I("code");
        //生成二维码
        $this->buildQrcode($code,$code.".png",date('Ymd',NOW_TIME));

        //下载二维码
        $upload_path = C("QRCODE_UPLOAD_PATH");
        $filename = $upload_path.date('Ymd',NOW_TIME).'/'.$code.'.png';
        import('ORG.Net.Http');
        Http::download($filename,$code.'.png');

    }




}