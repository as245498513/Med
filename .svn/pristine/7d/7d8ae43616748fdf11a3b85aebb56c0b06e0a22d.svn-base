<?php
// +----------------------------------------------------------------------
// | ThinkCMF [ WE CAN DO IT MORE SIMPLE ]
// +----------------------------------------------------------------------
// | Copyright (c) 2013-2014 http://www.thinkcmf.com All rights reserved.
// +----------------------------------------------------------------------
// | Author: Tuolaji <479923197@qq.com>
// +----------------------------------------------------------------------
/**
 * 账号销售流程
 */
namespace Admin\Controller;
use Common\Controller\AdminbaseController;
use Think\Exception;

class SellFlowController extends AdminbaseController {
    /**
     * 出货申请列表
     */
    public function order_apply_list(){
        //参数
        $customer_name = I('customer_name');
        $order_sn = I('order_sn');
        $apply_name = I('apply_name');
        $start_time = I('start_time');
        $end_time   = I('end_time');
        $sell_order = D('Common/SellOrder');
        $user_model = M('users');
        $user_id = sp_get_current_admin_id();

        //是否仓库管理员
        $is_stockman = 0;
        //获取角色名,仓库管理员可以查看全部订单
        $role_info = M('role_user')->join('cmf_role ON cmf_role.id=cmf_role_user.role_id')->where(array('cmf_role_user.user_id'=>$user_id))->find();
        if($role_info['name'] != '仓库管理员'){
            $where['sales_id'] = $user_id;
        }else{
            $is_stockman = 1;
        }
        $where['order_state'] = array('in','-1,1');

        if($customer_name){
           $where['customer_name'] = array('like','%'.$customer_name.'%');
        }
        if($order_sn){
            $where['order_sn'] = array('like','%'.$order_sn.'%');
        }
        if($apply_name){
            $app_where['user_nicename'] = array('like','%'.$apply_name.'%');
            $user_ids = $user_model->field('id')->where($app_where)->select();
            $user_arr = array();
            foreach($user_ids as $k=>$v){
                $user_arr[] = $v['id'];
            }
            $user_ids_str = implode(',',$user_arr);
            $where['sales_id'] = array('in',$user_ids_str);
        }
        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['create_order_time'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['create_order_time'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['create_order_time'] = array('between',array($start_time_st,$end_time_st));
        }

        //分页
        $count = $sell_order->where($where)->count();
        $page = $this->page($count, 15);

        $list = $sell_order->where($where)->limit($page->firstRow,$page->listRows)->order('order_state desc,create_order_time desc')->select();
        foreach($list as $key=>$value){
            $list[$key]['sales_name'] = $user_model->where(array('id'=>$value['sales_id']))->getField('user_nicename');
        }
        $this->assign('list',$list);
        $this->assign("customer_name",$customer_name);
        $this->assign("order_sn",$order_sn);
        $this->assign("apply_name",$apply_name);
        $this->assign("is_stockman",$is_stockman);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time?$end_time:date('Y-m-d H:i',NOW_TIME));
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 出货申请
     * 新增
     */
    public function order_apply_add(){
        $this->display();
    }

    /**
     * 出货申请
     * 新增提交
     */
    public function order_apply_add_post(){
        //参数
        $goods_num = I('goods_num');
        $goods_price = I('goods_price');
        $customer_name = I('customer_name');
        $customer_contact_type = I('customer_contact_type');
        $customer_contact = I('customer_contact');
        $sell_order = D('Common/SellOrder');
        $sell_order_goods = M('sell_order_goods');
        $register_log = M('xxt_script_register_log');

        //获取销售员id
        $sales_id = sp_get_current_admin_id();
        //账号类型,默认为陌陌
        $goods_type = 1;
        //获取当前时间
        $now_time = NOW_TIME;

        if(IS_POST){
            if($sell_order->create()!=false){
                //从成品库中获取账号
                $list = $this->getGoodsByNums($goods_num);
                if(!is_array($list)){
                    $this->error("库存不足,余量为,".$list.",请联系仓管员");
                }else{
                    //加入订单

                    $order_sn = $this->_makeOrderSn($sales_id);
                    $add = array(
                        'order_sn'=>$order_sn,
                        'goods_type'=>$goods_type,
                        'goods_num'=>$goods_num,
                        'goods_price'=>$goods_price,
                        'sales_id'=>$sales_id,
                        'order_state'=>1,
                        'is_paid'=>0,
                        'customer_name'=>$customer_name,
                        'customer_contact_type'=>$customer_contact_type,
                        'customer_contact'=>$customer_contact,
                        'order_amount'=>$goods_price*$goods_num,
                        'create_order_time'=>$now_time

                    );
                    $rs = $sell_order->add($add);
                    if(!$rs){
                       $this->error("生成订单失败");
                    }else{
                        $addAll = array();
                        foreach($list as $key=>$value){
                            //将即将出货的账号冻结
                            $where['register_username'] = $value['register_username'];
                            $save = array('is_freeze'=>1);
                            $aa = $register_log->where($where)->save($save);

                            //加入订单货物详情表
                            $add_goods = array(
                                'order_sn'=>$order_sn,
                                'goods_type'=>$goods_type,
                                'register_username'=>$value['register_username'],
                                'register_password'=>$value['register_password'],
                                'last_check_time'=>$value['last_check_time'],
                                'register_time'=>$value['createtime'],
                                'create_order_time'=>$now_time
                            );
                            $addAll[] = $add_goods;
                        }

                        $rs2= $sell_order_goods->addAll($addAll);
                        if(!$rs2){
                            $this->error("生成订单失败");
                        }else{
                            $this->success("生成订单成功","order_apply_list");
                        }
                    }
                }
            }else{
                $this->error($sell_order->getError());
            }
        }
    }

    /**
     * 出货申请
     * 删除
     */
    public function order_apply_del_post(){
        //参数
        $order_sn = I('order_sn');
        $sell_order = M('SellOrder');
        $sell_order_goods = M('sell_order_goods');
        $register_log = M('xxt_script_register_log');

        $order_info = $sell_order->where(array('order_sn'=>$order_sn))->find();
        $return = array();
        if($order_info['order_state'] == 1 || $order_info['order_state']==-1){
            try{
                $sell_order->startTrans();
                //删除申请表
                $sell_order->where(array('order_sn'=>$order_sn))->delete();
                $goods_list = $sell_order_goods->where(array('order_sn'=>$order_sn))->select();
                //将账号的冻结状态解冻
                foreach($goods_list as $k=>$v){
                    $where['register_username'] = $v['register_username'];
                    $save = array('is_freeze'=>0);
                    $register_log->where($where)->save($save);
                }
                //删除商品
                $sell_order_goods->where(array('order_sn'=>$order_sn))->delete();
                $sell_order->commit();
                $return  = array('code'=>0,'message'=>'删除成功');
            }catch(Exception $e){
                $sell_order->rollback();
                $return  = array('code'=>-1,'message'=>'该订单不能删除');
            }
        }else{
            //如果已发货则不能删除
            $return  = array('code'=>-1,'message'=>'该订单不能删除');
        }
        $this->ajaxReturn($return);
    }

    /**
     * 确认出货
     */
    public function order_confirm(){
        //参数
        $order_id = I('id');
        $order_info = M('sell_order')->where(array('id'=>$order_id))->find();
        $order_info['sales_name'] = M('users')->where(array('id'=>$order_info['sales_id']))->getField('user_nicename');
        $this->assign('order_info',$order_info);
         $this->display();
    }



/**
 * 确认出货
 * 提交
 */
    public function order_confirm_post(){
        //参数
        $order_id = I('order_id');
        $order_sn = I('order_sn');
        $is_paid = I('is_paid');
        $is_reject = I('is_reject');
        $reject_reason = I('reject_reason');
        $sell_order = M('SellOrder');
        $register_log = M('xxt_script_register_log');
        $sell_order_goods = M('sell_order_goods');
        $user_id = sp_get_current_admin_id();

        //判断参数
        if($is_paid!=1&&$is_reject!=1){
            $this->error("请先确认财务到账,或者勾选拒绝出货");
        }
        if($is_reject==1&&empty($reject_reason)){
            $this->error("请填写拒绝理由");
        }
        if($is_reject==1&&$is_paid==1){
            $this->error("确认出货和拒绝只能勾选其中一个");
        }

        //仓管员确认出货
        if($is_paid==1){
            //更改订单状态
            $save = array(
                'is_paid'=>1,
                'order_state'=>2,
                'deliver_time'=>NOW_TIME
            );
            $rs = $sell_order->where(array('id'=>$order_id))->save($save);
            if(!$rs){
                $this->error("更改订单状态失败!");
            }else{
                //更改账号的状态为已售出
                $reg_save = array(
                    'sales_id'=>$user_id,
                    'sale_time'=>NOW_TIME,
                    'sell_staus'=>2,
                    'is_freeze'=>0
                );
                $goods_list = $sell_order_goods->where(array('order_sn'=>$order_sn))->select();
                //账号表更改销售状态
                foreach($goods_list as $key=>$value){
                    $register_log->where(array('register_username'=>$value['register_username']))->save($reg_save);
                }
                $this->success("出货成功!","order_apply_list");
            }
        }
        //拒绝出货
        if($is_reject){
            //更改订单状态
            $save = array(
                'order_state'=>-1,
                'reject_reason'=>$reject_reason,
                'reject_time'=>NOW_TIME
            );
            $rs = $sell_order->where(array('id'=>$order_id))->save($save);
            if(!$rs){
                $this->error("更改订单状态失败!");
            }else{
                //更改账号的冻结状态为解冻
                $reg_save = array(
                    'is_freeze'=>0
                );
                $goods_list = $sell_order_goods->where(array('order_sn'=>$order_sn))->select();
                foreach($goods_list as $key=>$value){
                    $register_log->where(array('register_username'=>$value['register_username']))->save($reg_save);
                }
                $this->success("已拒绝出货!","order_apply_list");
            }
        }

    }

    /**
     * 退货列表
     */
    public function order_return_apply_list(){
        //参数
        $customer_name = I('customer_name');
        $order_sn = I('order_sn');
        $old_order_sn = I('old_order_sn');
        $is_replenish = I('is_replenish',1);
        $start_time = I('start_time');
        $end_time   = I('end_time');
        $sell_order = D('Common/SellOrder');
        $user_model = M('users');
        $user_id = sp_get_current_admin_id();

        //是否仓库管理员
        $is_stockman = 0;
        //获取角色名,仓库管理员可以查看全部订单
        $role_info = M('role_user')->join('cmf_role ON cmf_role.id=cmf_role_user.role_id')->where(array('cmf_role_user.user_id'=>$user_id))->find();
        if($role_info['name'] != '仓库管理员'){
            $where['sales_id'] = $user_id;
        }else{
            $is_stockman = 1;
        }
        $where['is_replenish'] = $is_replenish;
        $where['order_state'] = array('in','-1,1,2');

        if($customer_name){
            $where['customer_name'] = array('like','%'.$customer_name.'%');
        }
        if($order_sn){
            $where['order_sn'] = array('like','%'.$order_sn.'%');
        }
        if($old_order_sn){
            $where['old_order_sn'] = array('like','%'.$old_order_sn.'%');
        }
        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['create_order_time'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['create_order_time'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['create_order_time'] = array('between',array($start_time_st,$end_time_st));
        }

        //分页
        $count = $sell_order->where($where)->count();
        $page = $this->page($count, 15);

        $list = $sell_order->where($where)->limit($page->firstRow,$page->listRows)->select();
        foreach($list as $key=>$value){
            $list[$key]['sales_name'] = $user_model->where(array('id'=>$value['sales_id']))->getField('user_nicename');
        }
        $this->assign('list',$list);
        $this->assign("customer_name",$customer_name);
        $this->assign("order_sn",$order_sn);
        $this->assign("old_order_sn",$old_order_sn);
        $this->assign("is_stockman",$is_stockman);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time?$end_time:date('Y-m-d H:i',NOW_TIME));
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 显示出货订单详情
     */
    public function order_goods_list(){
        //参数
        $order_sn = I('order_sn');
        $return_id = I('return_id');
        $is_abnormal = I('is_abnormal');
        $submit_display = I('submit_display');
        $register_username = I('register_username');
        $sell_order_goods = M('sell_order_goods');
        $sell_order_return = M('sell_order_return');

        if($register_username){
           $where['register_username'] = array('like','%'.$register_username.'%');
        }
        //查看问题账号列表
        if($is_abnormal==1){
            $return_username_list = $sell_order_return->where(array('id'=>$return_id))->getField('abnormal_reg_username');
            $where['register_username'] = array('in',$return_username_list);
        }else{
            $where['order_sn'] = $order_sn;
        }
        //查看正常账号
        if($is_abnormal==0){
            $where['replenish_username'] = array('eq','');
        }

        //分页
        $count = $sell_order_goods->where($where)->count();
        $page = $this->page($count,15);
        $list = $sell_order_goods->where($where)->limit($page->firstRow,$page->listRows)->select();

        $this->assign("list",$list);
        $this->assign("order_sn",$order_sn);
        $this->assign("is_abnormal",$is_abnormal);
        $this->assign("submit_display",$submit_display);
        $this->assign("register_username",$register_username);
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 换货申请
     * 列表
     */
    public function order_return_list(){
        //参数
        $customer_name = I('customer_name');
        $order_sn = I('order_sn');
        $apply_name = I('apply_name');
        $start_time = I('start_time');
        $end_time   = I('end_time');
        $sell_order_return = M('sell_order_return');
        $user_model = M('users');
        $user_id = sp_get_current_admin_id();

        //是否仓库管理员
        $is_stockman = 0;
        //获取角色名,仓库管理员可以查看全部订单
        $role_info = M('role_user')->join('cmf_role ON cmf_role.id=cmf_role_user.role_id')->where(array('cmf_role_user.user_id'=>$user_id))->find();
        if($role_info['name'] != '仓库管理员'){
            $where['apply_user_id'] = $user_id;
        }else{
            $is_stockman = 1;
        }
        $where['order_return_state'] = array('in','-1,1');

        if($customer_name){
            $where['customer_name'] = array('like','%'.$customer_name.'%');
        }
        if($order_sn){
            $where['order_sn'] = array('like','%'.$order_sn.'%');
        }

        if($apply_name){
            $app_where['user_nicename'] = array('like','%'.$apply_name.'%');
            $user_ids = $user_model->field('id')->where($app_where)->select();
            $user_arr = array();
            foreach($user_ids as $k=>$v){
                $user_arr[] = $v['id'];
            }
            $user_ids_str = implode(',',$user_arr);
            $where['apply_user_id'] = array('in',$user_ids_str);
        }

        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['createtime'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['createtime'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['createtime'] = array('between',array($start_time_st,$end_time_st));
        }

        //分页
        $count = $sell_order_return->where($where)->count();
        $page = $this->page($count, 15);

        $list = $sell_order_return->where($where)->limit($page->firstRow,$page->listRows)->order('createtime desc')->select();
        foreach($list as $key=>$value){
            $list[$key]['sales_name'] = $user_model->where(array('id'=>$value['sales_id']))->getField('user_nicename');
        }
        $this->assign('list',$list);
        $this->assign("customer_name",$customer_name);
        $this->assign("order_sn",$order_sn);
        $this->assign("apply_name",$apply_name);
        $this->assign("is_stockman",$is_stockman);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time?$end_time:date('Y-m-d H:i',NOW_TIME));
        $this->assign("page", $page->show('Admin'));
        $this->display();
    }

    /**
     * 换货申请
     * 新增
     */
    public function order_return_add(){
        //参数
        $order_id = I('id');
        $order_info = M('sell_order')->where(array('id'=>$order_id))->find();
        //24小时质保期，过了则不能申请换货
        $order_info['can_return_time'] = $order_info['deliver_time']+24*60*60;
        if(NOW_TIME>$order_info['can_return_time']){
            $this->error("改订单出货已超过24小时,不能申请换货!");
        }else{
            $this->assign('order_info',$order_info);
            $this->display();
        }
    }

    /**
     * 换货申请
     * 新增提交
     */
    public function order_return_add_post(){
        //参数
        $order_sn = I('order_sn');
        $can_return_time = I('can_return_time');
        $abnormal_accounts = I('abnormal_accounts');
        $return_reason = I('return_reason');
        $goods_num = I('goods_num');
        $sales_id = I('sales_id');
        $customer_name = I('customer_name');
        $order_return_model = M('sell_order_return');
        $sell_order = M('SellOrder');
        $user_id = sp_get_current_admin_id();
        //账号类型,默认陌陌
        $goods_type = 1;

        if(empty($abnormal_accounts)||empty($return_reason)){
            $this->error("请选择不正常账号并填写退换原因");
        }
        //将问题账号以逗号拼接
        $abnormal_reg_username = implode(",",$abnormal_accounts);

        //写入退换货表
        $add = array(
            'order_sn'=>$order_sn,
            'goods_type'=>$goods_type,
            'goods_num'=>$goods_num,
            'return_goods_num'=>count($abnormal_accounts),
            'can_return_time'=>$can_return_time,
            'return_reason'=>$return_reason,
            'apply_user_id'=>$user_id,
            'sales_id'=>$sales_id,
            'customer_name'=>$customer_name,
            'abnormal_reg_username'=>$abnormal_reg_username,
            'createtime'=>NOW_TIME
        );
        $rs = $order_return_model->add($add);
        if(!$rs){
            $this->error("换货申请失败");
        }else{
            //更改订单状态
            $save = array(
                'order_state'=>-2,
                'return_time'=>NOW_TIME,
            );
            $sell_order->where(array('order_sn'=>$order_sn))->save($save);

            $this->success("换货申请成功","order_return_list");
        }
    }

    /**
     * 确认换货
     * 页面
     */
    public function order_return_confirm(){
        //参数
        $return_id = I('id');
        $order_info = M('sell_order_return')->where(array('id'=>$return_id))->find();
        $order_info['sales_name'] = M('users')->where(array('id'=>$order_info['sales_id']))->getField('user_nicename');
        $this->assign('order_info',$order_info);
        $this->display();
    }

    /**
     * 确认换货
     * 提交
     */
    public function order_return_confirm_post(){
        //参数
        $order_sn = I('order_sn');
        //需要换货的退换货申请表id
        $return_id = I('return_id');
        $agreet_replenish = I('agreet_replenish');
        $is_reject = I('is_reject');
        $reject_reason = I('reject_reason');
        $return_goods_num = I('return_goods_num');
        $sell_order = M('SellOrder');
        $sell_order_goods = M('sell_order_goods');
        $sell_order_return = M('sell_order_return');
        $regist_log_model = M('xxt_script_register_log');


        $admin_id = sp_get_current_admin_id();
        $goods_type = 1;

        //判断参数
        if($agreet_replenish!=1&&$is_reject!=1){
            $this->error("请先勾选同意,或者勾选拒绝申请");
        }
        if($is_reject==1&&empty($reject_reason)){
            $this->error("请填写拒绝理由");
        }
        if($is_reject==1&&$agreet_replenish==1){
            $this->error("同意换货和拒绝只能勾选其中一个");
        }

        //原来订单信息
        $order_info = $sell_order->where(array('order_sn'=>$order_sn))->find();

        //仓管员确认换货
        if($agreet_replenish==1){
            //开启事务
            $sell_order->startTrans();
            try{
            //生成一张新的订单写入申请出货表
            $new_order_sn = $this->_makeOrderSn($admin_id);
            $now_time = NOW_TIME;
            //从成品库中获取账号
            $list = $this->getGoodsByNums($return_goods_num);
            if(!is_array($list)){
                $this->error("库存不足,余量为,".$list);
            }else{
                $add = array(
                    'order_sn'=>$new_order_sn,
                    'goods_type'=>$goods_type,
                    'goods_num'=>$return_goods_num,
                    'goods_price'=>0,//换货单价为0
                    'sales_id'=>$order_info['sales_id'],
                    'order_state'=>2,
                    'is_paid'=>1,
                    'customer_name'=>$order_info['customer_name'],
                    'customer_contact_type'=>$order_info['customer_contact_type'],
                    'customer_contact'=>$order_info['customer_contact'],
                    'order_amount'=>0,//换货订单总价为0
                    'is_replenish'=>1,//是换货
                    //换货字段
                    'admin_id'=>$admin_id,
                    'return_time'=>$now_time,
                    'deliver_time'=>$now_time,
                    'old_order_sn'=>$order_info['order_sn'],//原订单号
                    'create_order_time'=>$now_time
                );
                $rs = $sell_order->add($add);
                if(!$rs){
                    E('生成换货订单失败');
                }else{
                    //账号表改为退换状态
                    $reg_save = array(
                        'sales_id'=>$order_info['sales_id'],
                        'sale_time'=>NOW_TIME,
                        'sell_staus'=>4,//状态改为退换
                        'is_freeze'=>0
                    );
                    $addAll = array();
                    foreach($list as $key=>$value){
                        //加入订单货物详情表
                        $add_goods = array(
                            'order_sn'=>$new_order_sn,
                            'goods_type'=>$goods_type,
                            'register_username'=>$value['register_username'],
                            'register_password'=>$value['register_password'],
                            'last_check_time'=>$value['last_check_time'],
                            'register_time'=>$value['createtime'],
                            'is_replenish'=>1,//是换货
                            'create_order_time'=>$now_time
                        );
                        $addAll[] = $add_goods;
                        //更改账号的状态为已售出
                        $regist_log_model->where(array('register_username'=>$value['register_username']))->save($reg_save);
                    }
                    $sell_order_goods->addAll($addAll);
                    //修改退换货申请表订单状态为换货完成状态
                    $sell_order_return->where(array('id'=>$return_id))->save(array('order_return_state'=>2));


                    //记录goods表，问题账号更换后的账号
                    $return_info = $sell_order_return->where(array('id'=>$return_id))->find();
                    $ab_account = explode(',',$return_info['abnormal_reg_username']);
                    if(!$ab_account){
                        $ab_account = $return_info['abnormal_reg_username'];
                    }
                    foreach($ab_account as $k=>$v){
                        //记录更换后的账号
                        $sell_order_goods->where(array('register_username'=>$v))->save(array('replenish_username'=>$list[$k]['register_username']));
                        //注册账号表账号状态改为被封
                        $regist_log_model->where(array('register_username'=>$v))->save(array('account_status'=>2));
                    }
                    //修改原来订单状态为换货完成状态
                    $sell_order->where(array('order_sn'=>$order_sn))->save(array('order_state'=>-3));
                 }
              }
                //事务提交
                $sell_order->commit();
                $this->success("生成换货订单成功");
            }catch(Exception $e){
                $sell_order->rollback();
                $this->error("生成换货订单失败");
            }
        }

        //拒绝换货
        if($is_reject==1&&$reject_reason){
            //更改换货申请表状态
            $save = array(
                'order_return_state'=>-1,
                'reject_reason'=>$reject_reason,
                'reject_time'=>NOW_TIME
            );
            $rs = $sell_order_return->where(array('id'=>$return_id))->save($save);
            if(!$rs){
               $this->error("拒绝换货操作失败");
            }else{
                //更改原来订单表的状态
                $sell_order->where(array('order_sn'=>$order_sn))->save(array('order_state'=>2));

                $this->success("拒绝换货操作成功","order_return_list");
            }
        }

    }

    /**
     * 已出货列表
     */
    public function order_deliver_list(){
        //参数
        $customer_name = I('customer_name');
        $order_sn = I('order_sn');
        $apply_name = I('apply_name');
        $start_time = I('start_time');
        $end_time   = I('end_time');
        $sell_order = D('Common/SellOrder');
        $user_model = M('users');
        $user_id = sp_get_current_admin_id();

        //是否仓库管理员
        $is_stockman = 0;
        //获取角色名,仓库管理员可以查看全部订单
        $role_info = M('role_user')->join('cmf_role ON cmf_role.id=cmf_role_user.role_id')->where(array('cmf_role_user.user_id'=>$user_id))->find();
        if($role_info['name'] != '仓库管理员'){
            $where['sales_id'] = $user_id;
        }else{
            $is_stockman = 1;
        }
        //已出货条件
        $where['order_state'] = array('in','-3,-2,2');

        //过滤换货正常的订单,换货后还有第二次换货的继续显示
        $where['order_amount'] = array('neq',0);

        if($customer_name){
            $where['customer_name'] = array('like','%'.$customer_name.'%');
        }
        if($order_sn){
            $where['order_sn'] = array('like','%'.$order_sn.'%');
        }

        if($apply_name){
            $app_where['user_nicename'] = array('like','%'.$apply_name.'%');
            $user_ids = $user_model->field('id')->where($app_where)->select();
            $user_arr = array();
            foreach($user_ids as $k=>$v){
                $user_arr[] = $v['id'];
            }
            $user_ids_str = implode(',',$user_arr);
            $where['sales_id'] = array('in',$user_ids_str);
        }

        //时间筛选
        if($start_time){
            $start_time_st =  strtotime($start_time);
            $where['create_order_time'] = array('egt',$start_time_st);
        }
        if($end_time){
            $end_time_st =  strtotime($end_time)+60;
            $where['create_order_time'] = array('elt',$end_time_st);
        }
        if($start_time&&$end_time){
            $start_time_st =  strtotime($start_time);
            $end_time_st =  strtotime($end_time)+60;
            $where['create_order_time'] = array('between',array($start_time_st,$end_time_st));
        }

        //分页
        $count = $sell_order->where($where)->count();
        $page = $this->page($count, 15);

        $list = $sell_order->where($where)->limit($page->firstRow,$page->listRows)->select();
        foreach($list as $key=>$value){
            $list[$key]['sales_name'] = $user_model->where(array('id'=>$value['sales_id']))->getField('user_nicename');
            //退换货订单
            if($value['order_state']==-3 || $value['order_state']==-2 ){
                $return_where['old_order_sn'] = $value['order_sn'];
                $list[$key]['return_list'] = $sell_order->where($return_where)->select();
            }

        }
        $this->assign('list',$list);
        $this->assign("customer_name",$customer_name);
        $this->assign("order_sn",$order_sn);
        $this->assign("apply_name",$apply_name);
        $this->assign("is_stockman",$is_stockman);
        $this->assign("finish_order",1);
        $this->assign("start_time",$start_time);
        $this->assign("end_time",$end_time?$end_time:date('Y-m-d H:i',NOW_TIME));
        $this->assign("page", $page->show('Admin'));
        $this->display("order_apply_list");
    }


    /**
     * 显示出货订单详情
     * 导出Excel
     */
    public function order_goods_toexcel(){
        //参数
        $order_sn = I('order_sn');
        $register_username = I('register_username');
        $sell_order_goods = M('sell_order_goods');


        if($register_username){
            $where['register_username'] = array('like','%'.$register_username.'%');
        }
        $where['order_sn'] = $order_sn;
        $list = $sell_order_goods->where($where)->select();
        //整理导出数据
        $result = array();
        foreach($list as $key=>$value){
            $result[$key]['order_no']   =  $value['order_sn']." ";
            $result[$key]['register_username'] = $value['register_username']." ";
            $result[$key]['register_password'] = $value['register_password']." ";
            $result[$key]['register_time']   =  date('Y-m-d H:i:s',$value['register_time'])." ";
            $result[$key]['last_check_time']   =  date('Y-m-d H:i:s',$value['last_check_time'])." ";
        }
        //导出excel
        $title_arr=array('订单编号','账号','密码','注册时间','最后检测时间');
        if(empty($result)){
            $this->error("导出文件为空，请注意筛选条件");
        }else{
            export_Excel("陌陌账号-".$order_sn,$result,$title_arr);
        }
    }

    /**
     *从成品库中获取一定数量的账号
     * @param Int num
     * @return array list
     */
    private  function getGoodsByNums($num,$type=0){
          $regist_log_model = M('xxt_script_register_log');
           //提取条件
           //状态正常
           $where['account_status'] = 1;
           //销售状态未售
           $where['sell_staus'] = 1;
           //注册时间大于3天的号
           $where['createtime'] = array('elt',NOW_TIME-3*24*60*60);
           //已检测过的号
            $where['check_up_num'] = array('gt',0);
            //未被冻结的号
            $where['is_freeze'] = 0;
            if($type){
                $where['retister_type'] = $type;
            }
            $list = $regist_log_model->field('id,register_username,register_password,createtime,last_check_time')->where($where)->order('last_check_time desc')->select();
            if(count($list)<$num){
               return count($list);
            }else{
                array_splice($list,$num);
                return $list;
            }
    }


    /**
     * 生成订单编号(两位随机 + 从2000-01-01 00:00:00 到现在的秒数+微秒+操作员ID%1000)
     * 长度 =2位 + 10位 + 3位 + 3位  = 18位
     * @return string
     */
    private function _makeOrderSn($member_id) {
        return mt_rand(10,99)
        . sprintf('%010d',time() - 946656000)
        . sprintf('%03d', (float) microtime() * 1000)
        . sprintf('%03d', (int) $member_id % 1000);
    }
}